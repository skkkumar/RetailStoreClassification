/*
 * perspective_correction.cpp
 *
 *  Created on: 24 Jan, 2018
 *      Author: sriram
 */

/*
 * main.cpp
 *
 *  Created on: 11 Jan, 2018
 *      Author: sriram
 */

#include <iostream>
#include <sstream>
#include <string>
#include <ctime>
#include <cstdio>

#include <opencv2/core.hpp>
#include <opencv2/core/utility.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/calib3d.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>

using namespace cv;
using namespace std;
int top, bottom, left1, right1;
int ax, ay, bx, by, cx, cy, dx, dy;
int posx = 26, posy = 26;
int pixelZoomVal = 50;
bool firstRect = true;
int closestEdge = -1;

float findDistance(int x, int y, int a, int b) {
	return sqrt(pow(x - a, 2) + pow(y - b, 2));
}

int findClosestEdge(int x, int y) {
	float threshold = 10.0;
	float distance = findDistance(x, y, ax, ay);
	if (distance < threshold)
		return 1;
	distance = findDistance(x, y, bx, by);
	if (distance < threshold)
		return 2;
	distance = findDistance(x, y, cx, cy);
	if (distance < threshold)
		return 3;
	distance = findDistance(x, y, dx, dy);
	if (distance < threshold)
		return 4;
	return -1;
}

void CallBackFunc(int event, int x, int y, int flags, void* userdata) {
	if (event == EVENT_LBUTTONDOWN) {
		cout << "Left button of the mouse is clicked - position (" << x << ", "
				<< y << ")" << endl;
		if (firstRect) {
			ax = x;
			ay = y;
			dx = x;
			by = y;
		} else {
			//find the closest edge
			closestEdge = findClosestEdge(x, y);

		}
	} else if (event == EVENT_LBUTTONUP) {
		cout << "Right button of the mouse is clicked - position (" << x << ", "
				<< y << ")" << endl;
		if (firstRect) {
			cx = x;
			cy = y;
			bx = x;
			dy = y;
			firstRect = false;
		} else {
			if (closestEdge != -1) {

				//update coordinates
				if (closestEdge == 1) {
					ax = x;
					ay = y;

				} else if (closestEdge == 2) {
					bx = x;
					by = y;

				} else if (closestEdge == 3) {
					cx = x;
					cy = y;

				} else if (closestEdge == 4) {
					dx = x;
					dy = y;
				}

			}
		}

	}
	else if (event == EVENT_MOUSEMOVE){
		posx = x;
		posy = y;
	}
	else if (event == EVENT_MOUSEWHEEL){
	    if (getMouseWheelDelta(flags)>0)
	    	pixelZoomVal += 1;
	    else
	    	pixelZoomVal -= 1;
		}
}
int main(int, char**) {
	vector<Point> pixelPoints;

	VideoCapture cap(2); // open the default camera
	if (!cap.isOpened())  // check if we succeeded
		return -1;

	cv::Mat cam(3, 3, cv::DataType<float>::type);
	cv::Mat dist(4, 1, cv::DataType<float>::type);
	cam.at<float>(0, 0) = 3.7575150581318337e+02;
	cam.at<float>(0, 1) = 0.0f;
	cam.at<float>(0, 2) = 2.9978601032576893e+02;

	cam.at<float>(1, 0) = 0.0f;
	cam.at<float>(1, 1) = 3.8047674174071761e+02;
	cam.at<float>(1, 2) = 2.4437998793275111e+02;

	cam.at<float>(2, 0) = 0.0f;
	cam.at<float>(2, 1) = 0.0f;
	cam.at<float>(2, 2) = 1.0f;

	dist.at<float>(0, 0) = -1.9769469386730368e-02;
	dist.at<float>(1, 0) = -1.2895307970375450e-01;
	dist.at<float>(2, 0) = 4.1004816055513822e-02;
	dist.at<float>(3, 0) = 0.0f;

	Mat frame;
	Mat newCamMat;
	cv::Mat map1, map2;
	fisheye::estimateNewCameraMatrixForUndistortRectify(cam, dist,
			cv::Size(640, 480), Matx33d::eye(), newCamMat, 1);
	fisheye::initUndistortRectifyMap(cam, dist, Matx33d::eye(), newCamMat,
			cv::Size(640, 480),
			CV_16SC2, map1, map2);

	namedWindow("frame", 1);
	namedWindow("zoomed", 2);
	for (;;) {
		cap >> frame; // get a new frame from camera
		flip(frame, frame, 1);

		Mat m_undistImg;
		Mat zoomed;
		cv::remap(frame, m_undistImg, map1, map2, cv::INTER_LINEAR);
		imshow("frame", frame);
		resize(m_undistImg,m_undistImg,Size(m_undistImg.cols*2,m_undistImg.rows*2));
		if (!firstRect) {
			//draw rect
			Point points[1][4];
			points[0][0] = Point(ax, ay);
			points[0][1] = Point(bx, by);
			points[0][2] = Point(cx, cy);
			points[0][3] = Point(dx, dy);

			int lineType = 1;
			const Point* ppt[1] = { points[0] };
			int npt[] = { 4 };
			polylines(m_undistImg, ppt, npt, 1, true, Scalar(255, 0, 255), 1,
					lineType);
			circle(m_undistImg, Point(ax, ay), 2, Scalar(0, 255, 0), 3, LINE_8);
			circle(m_undistImg, Point(bx, by), 2, Scalar(0, 255, 0), 3, LINE_8);
			circle(m_undistImg, Point(cx, cy), 2, Scalar(0, 255, 0), 3, LINE_8);
			circle(m_undistImg, Point(dx, dy), 2, Scalar(0, 255, 0), 3, LINE_8);
			pixelPoints.clear();
			pixelPoints.push_back(Point(ax, ay));
			pixelPoints.push_back(Point(bx, by));
			pixelPoints.push_back(Point(cx, cy));
			pixelPoints.push_back(Point(dx, dy));

			cout << pixelPoints<<endl<<flush;

		}


	    //draw zoom window
		if(posx > pixelZoomVal/2 && posy > pixelZoomVal/2 && posx < 2 * 640 - pixelZoomVal/2 && posy < 2 * 480 - pixelZoomVal/2 ){
			Rect region_of_interest = Rect(posx - pixelZoomVal/2, posy - pixelZoomVal/2, pixelZoomVal, pixelZoomVal);
			Mat cropWindow = m_undistImg(region_of_interest);
			resize(cropWindow, cropWindow, Size(50, 50), 0, 0, INTER_CUBIC);
			line(cropWindow, Point(15, 25), Point(35,25),
					Scalar(255,0,0), 1, LINE_8 );
			line(cropWindow, Point(25,15), Point(25,35),
								Scalar(255,0,0), 1, LINE_8 );
			imshow("zoomed", cropWindow);
		}


		imshow("undist image", m_undistImg);
		setMouseCallback("undist image", CallBackFunc, NULL);
		if (waitKey(30) >= 0) {
			break;
		}
	}
	// the camera will be deinitialized automatically in VideoCapture destructor
	return 0;
}
